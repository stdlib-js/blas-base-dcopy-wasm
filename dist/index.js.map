{
  "version": 3,
  "sources": ["../lib/binary.js", "../lib/module.js", "../lib/routine.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar readWASM = require( '@stdlib/fs-read-wasm' ).sync;\n\n\n// MAIN //\n\nvar wasm = readWASM( resolve( __dirname, '..', 'src', 'main.wasm' ) );\n\n\n// EXPORTS //\n\nmodule.exports = wasm;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar isWebAssemblyMemory = require( '@stdlib/assert-is-wasm-memory' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar inherits = require( '@stdlib/utils-inherit' );\nvar WasmModule = require( '@stdlib/wasm-module-wrapper' );\nvar format = require( '@stdlib/string-format' );\nvar wasmBinary = require( './binary.js' );\n\n\n// MAIN //\n\n/**\n* BLAS routine WebAssembly module wrapper constructor.\n*\n* @constructor\n* @param {Object} memory - WebAssembly memory instance\n* @throws {TypeError} must provide a WebAssembly memory instance\n* @returns {Module} module instance\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n* var ones = require( '@stdlib/array-ones' );\n* var zeros = require( '@stdlib/array-zeros' );\n* var bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dcopy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dcopy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dcopy.write( xptr, oneTo( N, dtype ) );\n* dcopy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = dcopy.main( N, xptr, 1, yptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* dcopy.read( yptr, view );\n* // view => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction Module( memory ) {\n\tif ( !( this instanceof Module ) ) {\n\t\treturn new Module( memory );\n\t}\n\tif ( !isWebAssemblyMemory( memory ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a WebAssembly memory instance. Value: `%s`.', memory ) );\n\t}\n\t// Call the parent constructor:\n\tWasmModule.call( this, wasmBinary, memory, {\n\t\t'env': {\n\t\t\t'memory': memory\n\t\t}\n\t});\n\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Module, WasmModule );\n\n/**\n* Copies values from `x` into `y`.\n*\n* @name main\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} yptr - output array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @returns {NonNegativeInteger} output array pointer (i.e., byte offset)\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n* var ones = require( '@stdlib/array-ones' );\n* var zeros = require( '@stdlib/array-zeros' );\n* var bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dcopy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dcopy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dcopy.write( xptr, oneTo( N, dtype ) );\n* dcopy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = dcopy.main( N, xptr, 1, yptr, 1 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* dcopy.read( yptr, view );\n* // view => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nsetReadOnly( Module.prototype, 'main', function dcopy( N, xptr, strideX, yptr, strideY ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_dcopy( N, xptr, strideX, yptr, strideY );\n\treturn yptr;\n});\n\n/**\n* Copies values from `x` into `y` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Module.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NonNegativeInteger} xptr - input array pointer (i.e., byte offset)\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {NonNegativeInteger} yptr - output array pointer (i.e., byte offset)\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {NonNegativeInteger} output array pointer (i.e., byte offset)\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n* var ones = require( '@stdlib/array-ones' );\n* var zeros = require( '@stdlib/array-zeros' );\n* var bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var dcopy = new Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* dcopy.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* dcopy.write( xptr, oneTo( N, dtype ) );\n* dcopy.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* var ptr = dcopy.ndarray( N, xptr, 1, 0, yptr, 1, 0 );\n* // returns <number>\n*\n* var bool = ( ptr === yptr );\n* // returns true\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* dcopy.read( yptr, view );\n* // view => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nsetReadOnly( Module.prototype, 'ndarray', function dcopy( N, xptr, strideX, offsetX, yptr, strideY, offsetY ) { // eslint-disable-line stdlib/jsdoc-doctest-decimal-point\n\tthis._instance.exports.c_dcopy_ndarray( N, xptr, strideX, offsetX, yptr, strideY, offsetY ); // eslint-disable-line max-len\n\treturn yptr;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Module;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar inherits = require( '@stdlib/utils-inherit' );\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar readDataView = require( '@stdlib/strided-base-read-dataview' ).ndarray;\nvar Memory = require( '@stdlib/wasm-memory' );\nvar arrays2ptrs = require( '@stdlib/wasm-base-arrays2ptrs' );\nvar strided2object = require( '@stdlib/wasm-base-strided2object' );\nvar Module = require( './module.js' );\n\n\n// MAIN //\n\n/**\n* Routine constructor.\n*\n* @private\n* @constructor\n* @returns {Routine} routine instance\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dcopy = new Routine();\n*\n* // Initialize the module:\n* dcopy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.main( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dcopy = new Routine();\n*\n* // Initialize the module:\n* dcopy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nfunction Routine() {\n\tif ( !( this instanceof Routine ) ) {\n\t\treturn new Routine();\n\t}\n\tModule.call( this, new Memory({\n\t\t'initial': 0\n\t}));\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherits( Routine, Module );\n\n/**\n* Copies values from `x` into `y`.\n*\n* @name main\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dcopy = new Routine();\n*\n* // Initialize the module:\n* dcopy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.main( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nsetReadOnly( Routine.prototype, 'main', function dcopy( N, x, strideX, y, strideY ) {\n\treturn this.ndarray( N, x, strideX, stride2offset( N, strideX ), y, strideY, stride2offset( N, strideY ) ); // eslint-disable-line max-len\n});\n\n/**\n* Copies values from `x` into `y` using alternative indexing semantics.\n*\n* @name ndarray\n* @memberof Routine.prototype\n* @readonly\n* @type {Function}\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float64Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting `x` index\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting `y` index\n* @returns {Float64Array} output array\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Create a new routine:\n* var dcopy = new Routine();\n*\n* // Initialize the module:\n* dcopy.initializeSync();\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nsetReadOnly( Routine.prototype, 'ndarray', function dcopy( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar ptrs;\n\tvar p0;\n\tvar p1;\n\n\t// Convert the input arrays to \"pointers\" in the module's memory:\n\tptrs = arrays2ptrs( this, [\n\t\tstrided2object( N, x, strideX, offsetX ),\n\t\tstrided2object( N, y, strideY, offsetY )\n\t]);\n\tp0 = ptrs[ 0 ];\n\tp1 = ptrs[ 1 ];\n\n\t// Perform computation by calling the corresponding parent method:\n\tModule.prototype.ndarray.call( this, N, p0.ptr, p0.stride, p0.offset, p1.ptr, p1.stride, p1.offset ); // eslint-disable-line max-len\n\n\t// If the output array data had to be copied to module memory, copy the results to the provided output array...\n\tif ( p1.copy ) {\n\t\treadDataView( N, this.view, p1.stride*p1.BYTES_PER_ELEMENT, p1.ptr, y, strideY, offsetY, true ); // eslint-disable-line max-len\n\t}\n\treturn y;\n});\n\n\n// EXPORTS //\n\nmodule.exports = Routine;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Routine = require( './routine.js' );\n\n\n// MAIN //\n\n/**\n* WebAssembly module to copy values from `x` into `y`.\n*\n* @name dcopy\n* @type {Routine}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.main( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\nvar dcopy = new Routine();\ndcopy.initializeSync(); // eslint-disable-line node/no-sync\n\n\n// EXPORTS //\n\nmodule.exports = dcopy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* WebAssembly routine to copy values from `x` into `y`.\n*\n* @module @stdlib/blas-base-dcopy-wasm\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcopy = require( '@stdlib/blas-base-dcopy-wasm' );\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.main( x.length, x, 1, y, 1 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var dcopy = require( '@stdlib/blas-base-dcopy-wasm' );\n*\n* // Define strided arrays:\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n*\n* // Perform operation:\n* dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\n* // y => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*\n* @example\n* var Memory = require( '@stdlib/wasm-memory' );\n* var oneTo = require( '@stdlib/array-one-to' );\n* var ones = require( '@stdlib/array-ones' );\n* var zeros = require( '@stdlib/array-zeros' );\n* var bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\n* var dcopy = require( '@stdlib/blas-base-dcopy-wasm' );\n*\n* // Create a new memory instance with an initial size of 10 pages (640KiB) and a maximum size of 100 pages (6.4MiB):\n* var mem = new Memory({\n*     'initial': 10,\n*     'maximum': 100\n* });\n*\n* // Create a BLAS routine:\n* var mod = new dcopy.Module( mem );\n* // returns <Module>\n*\n* // Initialize the routine:\n* mod.initializeSync();\n*\n* // Define a vector data type:\n* var dtype = 'float64';\n*\n* // Specify a vector length:\n* var N = 5;\n*\n* // Define pointers (i.e., byte offsets) for storing two vectors:\n* var xptr = 0;\n* var yptr = N * bytesPerElement( dtype );\n*\n* // Write vector values to module memory:\n* mod.write( xptr, oneTo( N, dtype ) );\n* mod.write( yptr, ones( N, dtype ) );\n*\n* // Perform computation:\n* mod.main( N, xptr, 1, yptr, 1 );\n*\n* // Read out the results:\n* var view = zeros( N, dtype );\n* mod.read( yptr, view );\n*\n* console.log( view );\n* // => <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar Module = require( './module.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'Module', Module );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n\n// exports: { \"Module\": \"main.Module\" }\n"],
  "mappings": "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",
  "names": ["require_binary", "__commonJSMin", "exports", "module", "resolve", "readWASM", "wasm", "require_module", "__commonJSMin", "exports", "module", "isWebAssemblyMemory", "setReadOnly", "inherits", "WasmModule", "format", "wasmBinary", "Module", "memory", "N", "xptr", "strideX", "yptr", "strideY", "offsetX", "offsetY", "require_routine", "__commonJSMin", "exports", "module", "setReadOnly", "inherits", "stride2offset", "readDataView", "Memory", "arrays2ptrs", "strided2object", "Module", "Routine", "N", "x", "strideX", "y", "strideY", "offsetX", "offsetY", "ptrs", "p0", "p1", "require_main", "__commonJSMin", "exports", "module", "Routine", "dcopy", "setReadOnly", "main", "Module"]
}
